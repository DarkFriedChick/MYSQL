表的联结：

select products.*,vendors.*
from products,vendors;            没有where子句，是叉乘的形式，笛卡尔积的形式

select products.*,vendors.*
from products,vendors
where products.vend_id=vendors.vend_id;  

自然联结：where子句很重要
select prod_id,prod_name,p.vend_id,v.vend_id,vend_name
from products p,vendors v
where p.vend_id=v.vend_id;        

查询提供产品safe的供应商的名字：

select prod_id,prod_name,p.vend_id,v.vend_id,vend_name
from products p,vendors v
where p.vend_id=v.vend_id
and prod_name='safe';

select vend_name
from products p,vendors v
where p.vend_id=v.vend_id
and prod_name='safe';   

select prod_id,prod_name,p.vend_id,v.vend_id,vend_name
from products p inner join vendors v
on p.vend_id=v.vend_id
where prod_name='safe';

select cust_name,c.cust_id,o.cust_id,o.order_num,oi.order_num,prod_id
from customers c,orders o,orderitems oi
where c.cust_id=o.cust_id  and o.order_num=oi.order_num;

查询顾客Wascals订购了哪些产品:

select cust_name,prod_id
from customers c,orders o,orderitems oi
where c.cust_id=o.cust_id  and o.order_num=oi.order_num
and cust_name='Wascals';

select cust_name,prod_id
from customers c  inner join orders o inner join orderitems oi
on c.cust_id=o.cust_id  and o.order_num=oi.order_num
where cust_name='Wascals';

内联结：inner join

select prod_id,prod_name,p.vend_id,v.vend_id,vend_name
from products p inner join vendors v
on p.vend_id=v.vend_id;    

外联结：[outer] join

  左外联结：left outer join  左表的所有记录都显示，右表没有匹配的记录，以null填充

select v.vend_id,vend_name,prod_id,prod_name,p.vend_id
from  vendors v left outer join products p
on p.vend_id=v.vend_id;    


  右外联结：right outer join   右表的所有记录都显示，左表没有匹配的记录，以null填充

select prod_id,prod_name,p.vend_id,v.vend_id,vend_name
from products p right outer join vendors v
on p.vend_id=v.vend_id;    

select prod_id,prod_name,p.vend_id,v.vend_id,vend_name
from products p right  join vendors v
on p.vend_id=v.vend_id;    

组合查询：

select vend_id,vend_name from vendors union select cust_id,cust_name from customers;
select cust_id,cust_name from customers union select vend_id,vend_name from vendors;

select cust_id id ,cust_name name from customers union select vend_id,vend_name from vendors  order by id;

组合查询，字段数要相同

 select * from products where prod_price >10;
 select * from products where vend_id=1003;

 select * from products where vend_id=1003
 union
 select * from products where prod_price >10;

union自动去重复，如果想要不去重复使用 union all

 select * from products where vend_id=1003
 union all
 select * from products where prod_price >10;



创建表：   
  create table [if not exists] 表名(列名1 数据类型 约束条件,列名2 数据类型 约束条件,…,列名N 数据类型 约束条件);
   create table students(stu_id int primary key, stu_name char(30) not null, stu_sex enum('F','M'),age int);

primary key ：主键  非空、唯一
not null ：非空
enum():枚举
auto_increment:自增长
unique: 唯一
comment ：说明、备注
default：默认值

查询表结构： show full columns from students;
查询表内数据： select * from students;

插入数据：insert 

 单条插入：insert into 表名(列名1,列名2……) values(列值1,列值2……);
            insert into students(stu_id,stu_name,stu_sex,age) values(1001,'Mary','F',18);

 批量插入：insert into 表名(列名1,列名2……) values(列值1,列值2……),(列值1,列值2……),……,(列值1,列值2……);
             insert into students(stu_id,stu_name,stu_sex,age) values(1002,'Lucy','F',18),
                                                                     (1003,'Hanmeimei','F',18),
                                                                     (1004,'Liutao','M',18);

如果插入的值的个数和表中列的个数相同，且顺序与表结构一致，那么前面(列名1,列名2……)可以省略
         insert into students values(1005,'Wangbing','F',18);
         insert into students(stu_id,stu_name,stu_sex) values(1006,'张bing','F');

插入查询的数据
  insert into students03(stu_id,stu_name) select vend_id,vend_name from vendors; 

更新数据：update
    update 表名 set 列名1=列值1,……,列名N=列值N where 表达式；         注：where 子句一般不能省，如果不加where 子句，会将表内所有记录都更新；
    
      update students set age=19;  修改了表内所有记录的age;
      update students set stu_name='Zhangbin',age=20 where stu_id=1006;
      update students set age=18 where stu_id<1003;

删除表内数据：delete     
     delete from 表名 where 表达式;             注：where 子句一般不能省，如果不加where 子句，会将表内所有记录都删除；  
     delete from students where stu_id=1006;  
     delete from students where stu_id<1003;
     delete from students;

  delete from 表名;  清空整张表
  truncate 表名; 展示效果相同，原理不同，删除整张表，然后快速新建一张跟原来表具有相同名字和相同表结构的表；


create table students01(stu_id int primary key auto_increment, stu_name char(30), stu_sex enum('F','M'),tel char(11) unique);
            insert into students01(stu_id,stu_name,stu_sex,tel) values(1001,'Mary','F','13776042496');
            insert into students01(stu_name,stu_sex,tel) values('Mary','F','13776042498');                   此时stu_id=1002,因为自增auto_increment
            insert into students01(stu_id,stu_name,stu_sex,tel) values(1020,'Kitty','F','13776042497');
            insert into students01(stu_name,stu_sex,tel) values('Miaow','M','13776042490');                   此时stu_id=1021,因为自增auto_increment
            insert into students01(stu_id,stu_name,stu_sex,tel) values(1005,'Hellon','F','13776042491');
            insert into students01(stu_name,stu_sex,tel) values('Dream','F','13776042492');           此时stu_id=1022,因为自增auto_increment
            delete from  students01 where stu_id=1022;
            insert into students01(stu_name,stu_sex,tel) values('Dream','F','13776042492');           此时stu_id=1023,因为自增auto_increment

create table students02(stu_id int primary key, stu_name char(30) comment '姓名', age int default 18);

     insert into students02(stu_id,stu_name,age) values(1001,'Mary',10);
     insert into students02(stu_id,stu_name) values(1002,'Mary');

   insert into students02(stu_id,stu_name) select vend_id,vend_name from vendors where vend_id>1002; 

create table students03(stu_id int primary key, stu_name char(30) comment '姓名');

插入查询的数据

  insert into students03(stu_id,stu_name) select vend_id,vend_name from vendors; 

复制表结构：
    create table 新表名 like 数据库名.表名; 
      create table tt01 like testDB.products;
      create table tt02 like mysql.user;
插入数据
      insert into tt01 select * from products;


删除表：drop
   create table students1(stu_id int primary key, stu_name char(30) not null, stu_sex enum('F','M'),age int);

   drop table [if exists] 表名;
   drop table  students1;

修改表：alter
 改表名：
   alter table 表名 rename as 新表名;
   alter table 表名 rename to 新表名;  
   rename table 表名 to 新表名;  

    alter table tt01 rename to test01;
    alter table tt02 rename as test02;
    rename table test01 to tt01;

 增加列：
    alter table 表名 add [column] 列名 列的数据类型 约束条件 [位置] ;

    desc students02;
    select * from students02;

    alter table students02 add column stu_sex enum('M','F') default 'F';

    默认最后一列，可以不可以指定位置？
 
    first：第一列
    after 列名：某一列后面

       alter table students02 drop column stu_sex;
   alter table students02 add column stu_sex enum('M','F') default 'F' first;
       alter table students02 drop column stu_sex;
   alter table students02 add column stu_sex enum('M','F') default 'F' after stu_name;

 删除列：
    alter table 表名 drop [column] 列名;
    alter table students02 drop column stu_sex;










mysql> select * from products where prod_price >10;
+---------+---------+--------------+------------+----------------------------------------------------------------+
| prod_id | vend_id | prod_name    | prod_price | prod_desc                                                      |
+---------+---------+--------------+------------+----------------------------------------------------------------+
| ANV03   |    1001 | 2 ton anvil  |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |
| DTNTR   |    1003 | Detonator    |      13.00 | Detonator (plunger powered), fuses not included                |
| JP1000  |    1005 | JetPack 1000 |      35.00 | JetPack 1000, intended for single use                          |
| JP2000  |    1005 | JetPack 2000 |      55.00 | JetPack 2000, multi-use                                        |
| SAFE    |    1003 | Safe         |      50.00 | Safe with combination lock                                     |
+---------+---------+--------------+------------+----------------------------------------------------------------+
5 rows in set (0.00 sec)

mysql> select * from products where vend_id=1003;
+---------+---------+----------------+------------+-------------------------------------------------+
| prod_id | vend_id | prod_name      | prod_price | prod_desc                                       |
+---------+---------+----------------+------------+-------------------------------------------------+
| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included |
| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)           |
| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)            |
| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                      |
| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                        |
| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                          |
| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                     |
+---------+---------+----------------+------------+-------------------------------------------------+
7 rows in set (0.00 sec)

mysql> select * from products where vend_id=1003
    -> union
    -> select * from products where prod_price >10;
+---------+---------+----------------+------------+----------------------------------------------------------------+
| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |
+---------+---------+----------------+------------+----------------------------------------------------------------+
| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |
| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |
| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |
| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |
| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |
| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |
| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |
| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |
| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |
| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |
+---------+---------+----------------+------------+----------------------------------------------------------------+
10 rows in set (0.01 sec)


